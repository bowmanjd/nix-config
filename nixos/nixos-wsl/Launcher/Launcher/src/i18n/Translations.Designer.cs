//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Launcher.i18n {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Translations {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Translations() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Launcher.src.i18n.Translations", typeof(Translations).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured!
        ///Please report this issue on GitHub and make sure to attach the stack trace above..
        /// </summary>
        internal static string Error_Crashed {
            get {
                return ResourceManager.GetString("Error_Crashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not installed!.
        /// </summary>
        internal static string Error_NotInstalled {
            get {
                return ResourceManager.GetString("Error_NotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows Subsystem for Linux is not enabled!
        ///Please refer to {0} for details on how to install it..
        /// </summary>
        internal static string Error_WslMissing {
            get {
                return ResourceManager.GetString("Error_WslMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is already installed!.
        /// </summary>
        internal static string Install_AlreadyInstalled {
            get {
                return ResourceManager.GetString("Install_AlreadyInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install {0} if it has not been installed already.
        /// </summary>
        internal static string Install_Description {
            get {
                return ResourceManager.GetString("Install_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete the existing installation and install a fresh copy.
        /// </summary>
        internal static string Install_OptionReinstall {
            get {
                return ResourceManager.GetString("Install_OptionReinstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering {0}.....
        /// </summary>
        internal static string Install_RegisteringDistro {
            get {
                return ResourceManager.GetString("Install_RegisteringDistro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation finished successfully.
        /// </summary>
        internal static string Install_Success {
            get {
                return ResourceManager.GetString("Install_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find distro tarball.
        /// </summary>
        internal static string Install_TarballNotFound {
            get {
                return ResourceManager.GetString("Install_TarballNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall {0}.
        /// </summary>
        internal static string Install_UninstallDescription {
            get {
                return ResourceManager.GetString("Install_UninstallDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstalling {0}....
        /// </summary>
        internal static string Install_Uninstalling {
            get {
                return ResourceManager.GetString("Install_Uninstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall completed.
        /// </summary>
        internal static string Install_UninstallSuccess {
            get {
                return ResourceManager.GetString("Install_UninstallSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WSL distribution name.
        /// </summary>
        internal static string Option_DistroName {
            get {
                return ResourceManager.GetString("Option_DistroName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show version information.
        /// </summary>
        internal static string Option_Version {
            get {
                return ResourceManager.GetString("Option_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check whether or not the distribution is registered.
        /// </summary>
        internal static string Registered_Description {
            get {
                return ResourceManager.GetString("Registered_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not registered.
        /// </summary>
        internal static string Registered_False {
            get {
                return ResourceManager.GetString("Registered_False", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only return the appropriate exit code, dont write to the console.
        /// </summary>
        internal static string Registered_OptionQuiet {
            get {
                return ResourceManager.GetString("Registered_OptionQuiet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is registered.
        /// </summary>
        internal static string Registered_True {
            get {
                return ResourceManager.GetString("Registered_True", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manage the {0} WSL distribution.
        /// </summary>
        internal static string Root_Description {
            get {
                return ResourceManager.GetString("Root_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run a command in the current directory. If no command is specified, the default shell is launched.
        /// </summary>
        internal static string Run_Description {
            get {
                return ResourceManager.GetString("Run_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launcher: {0}.
        /// </summary>
        internal static string Version_Launcher {
            get {
                return ResourceManager.GetString("Version_Launcher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module:   {0}.
        /// </summary>
        internal static string Version_Module {
            get {
                return ResourceManager.GetString("Version_Module", resourceCulture);
            }
        }
    }
}
